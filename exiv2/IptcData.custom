/*
 * IptcData.custom - customization to Exiv2.ExifData
 *
 * Author(s):
 *	Stephane Delcroix  (stephane@delcroix.org)
 * 	Mike Gemuende (mike@gemuende.de)
 *
 * Copyright (c) 2008-2009 Novell
 *
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

public IEnumerator GetEnumerator ()
{
	return new Enumerator (this);
}

class Enumerator : IEnumerator
{
	IptcData iptcdata;

	public Enumerator (IptcData iptcdata)
	{
		this.iptcdata = iptcdata;
	}

	IptcDatumIterator current = null;
	IptcDatumIterator end = null;

	public object Current {
		get { return current; } 
	}

	public bool MoveNext ()
	{
		if (iptcdata.IsEmpty)
			return false;
		if (end == null)
			end = iptcdata.End ();
		if (current == null)
			current = iptcdata.Begin ();
		else
			current.Next ();
		if (current.Equals (end))
			return false;
		return true;
	}

	public void Reset ()
	{
		current = null;
	}
}

public object this [string key]
{
	get { return GetThis (key); }
	set {
		(GetThis (key) as IptcDatum).Value = value;
	}
}




